"use strict";

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface) {
    // Add 'recruiter' value to existing enum type for Notifications.user_role (Postgres)
    // The default enum name generated by Sequelize is usually "enum_Notifications_user_role"
    await queryInterface.sequelize.query(
      "DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type t JOIN pg_namespace n ON n.oid = t.typnamespace WHERE t.typname = 'enum_Notifications_user_role') THEN RETURN; END IF; END $$;"
    );
    await queryInterface.sequelize.query(
      "ALTER TYPE \"enum_Notifications_user_role\" ADD VALUE IF NOT EXISTS 'recruiter';"
    );
  },

  async down(queryInterface, Sequelize) {
    // PostgreSQL cannot easily remove a value from an enum; fallback: recreate type
    // We will recreate the enum without 'recruiter' and set the column to use the new enum
    const t = await queryInterface.sequelize.transaction();
    try {
      // Ensure there are no rows using the soon-to-be-removed enum value
      // Otherwise casting to the new enum will fail.
      await queryInterface.sequelize.query(
        "UPDATE \"Notifications\" SET \"user_role\" = 'admin' WHERE \"user_role\"::text = 'recruiter';",
        { transaction: t }
      );
      // 1) Rename old type
      await queryInterface.sequelize.query(
        'ALTER TYPE "enum_Notifications_user_role" RENAME TO "enum_Notifications_user_role_old";',
        { transaction: t }
      );
      // 2) Create new type without recruiter
      await queryInterface.sequelize.query(
        "CREATE TYPE \"enum_Notifications_user_role\" AS ENUM('student','staff','admin');",
        { transaction: t }
      );
      // 3) Alter column to new type
      await queryInterface.sequelize.query(
        'ALTER TABLE "Notifications" ALTER COLUMN "user_role" TYPE "enum_Notifications_user_role" USING "user_role"::text::"enum_Notifications_user_role";',
        { transaction: t }
      );
      // 4) Drop old type
      await queryInterface.sequelize.query(
        'DROP TYPE "enum_Notifications_user_role_old";',
        { transaction: t }
      );
      await t.commit();
    } catch (e) {
      await t.rollback();
      throw e;
    }
  },
};
